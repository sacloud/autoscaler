## 操作対象のリソースの定義
## スケールさせたいリソース群をここで定義する
resources:
  # サーバ(垂直スケール)
  - type: Server
    name: "vertical-scalable-server"
    selector:
      # 操作対象を決定するためにidかnamesを指定する
      id: 123456789012
      # names: ["example"]

      zones: ["is1a"]
    # プラン(省略可)、省略した場合はデフォルトのプラン範囲内でスケールする
    plans:
      - core: 1
        memory: 1
      - core: 2
        memory: 4
      - core: 4
        memory: 8

    # スペック
    # dedicated_cpu: false
    # gpu: 0
    # cpu_model: amd_epyc_7713p

    # スケール時の動作オプション
    shutdown_force: true

  # サーバ(水平スケール)
  - type: ServerGroup
    name: "server-group"

    # グループ内の各サーバの名前のプレフィックス
    server_name_prefix: "server-group"
    zones: ["is1a", "is1b"]

    min_size: 5   # 最小インスタンス数
    max_size: 20  # 最大インスタンス数

    auto_healing:
      enabled: true # 台数維持(自動復旧)機能のON/OFF

    shutdown_force: false # サーバでACPIが利用できない場合にtrueにする(強制シャットダウンとなる)

    # プラン一覧(省略可能)
    # Inputsからdesired state nameが指定された場合に利用する名前付きプランを定義する
    # desired state nameが指定されなかった場合はmin_sizeからmax_sizeの間でスケールアウト or インする
    # 例: 現在10台存在する場合:
    #     - UpかつDesiredStateName == "largest"の場合 -> 10台追加
    #     - UpかつDesiredStateName == "" or "default"の場合 -> 1台追加
    plans:
      - name: smallest
        size: 5
      - name: medium
        size: 10
      - name: largest
        size: 20

    template: # 各サーバのテンプレート
      tags: [ "tag1", "tag2" ]
      use_group_tag: true # @group特殊タグによるホスト分散を行うか

      description: "..."
      interface_driver: "virtio" # virtio or e1000
      plan:
        core: 2
        memory: 4
        dedicated_cpu: false
        # gpu: 0
        # cpu_model: amd_epyc_7713p

      # NICs
      network_interfaces:
        # 共有セグメントの場合
        #- upstream: "shared"

        # スイッチ or ルータ+スイッチに接続する場合
        - upstream:
            names: ["autoscaler-test02"] # セレクター(名前など)で対象スイッチ(or ルータ+スイッチ)を指定

          # NICに割り当てるIPアドレスブロックなどの定義
          assign_cidr_block: "192.168.12.32/27" # NICに割り当てるIPアドレスの範囲をCIDRブロックで指定
          assign_netmask_len: 24                # NICに割り当てるサブネットマスク長
          default_route: "192.168.12.1"

          # 上流リソースに渡すためのメタデータ
          expose:
            ports: [ 80, 443 ] # このNICで上流リソースに公開するポート番号

            # ELB向け
            server_group_name: "group1"

            ## GSLB向け
            #weight: 1

            ## LB向け
            #vips: [ "192.168.11.1" ] # 省略可
            #health_check:
            #  protocol: http
            #  path: "/healthz"
            #  status_code: 200

            ## DNS向け
            #record_name: "www"
            #record_ttl: 10

      # ディスク
      disks:
        - name_format: "%s-disk%03d" # 省略した場合は 'サーバ名+ディスク連番' (例: server-group-001-disk001)

          # コピー元、以下のいずれかを指定するorブランクディスクの場合は全て空にする
          source_archive:
            names: ["my-app-archive"] # セレクター(名前など)で対象アーカイブを指定
          source_disk:
            names: ["my-app-disk"]    # セレクター(名前など)で対象ディスクを指定
          os_type: "ubuntu2404"       # OSTypeで指定

          plan: "ssd"
          connection: "virtio"
          size: 40

      # 1番目のディスクの対するパラメータ(対応しているアーカイブの場合のみ指定可能)
      edit_parameter:
        disabled: false # ディスクの修正を行わない場合はtrue
        password: "your-password"
        disable_pw_auth: true
        enable_dhcp: false
        change_partition_uuid: true

        host_name_format: "%s" # ホスト名フォーマット、サーバ名とインデックスが利用可能(例: %s-%02d)。省略した場合はサーバ名が利用される

        # SSH公開鍵の指定
        ssh_keys:
          # ファイルパス or 文字列で指定
          - "~/.ssh/id_rsa.pub"
          - "ssh-rsa ..."

        # スタートアップスクリプト
        # サーバのIPアドレス(共有セグメントの場合の自動割り当て)などを{{ .IPAddress}}のようなGoのテンプレートで利用可能
        startup_scripts:
          # ファイルパス or 文字列で指定
          - "/path/to/your/script.sh"
          - |
            #!/bin/bash

            echo "server name: {{ .Name }}"



  # エンハンスドロードバランサ(垂直スケール)
  - type: ELB
    name: "vertical-scalable-elb"
    selector:
      names: ["example"]
    #プラン(省略可)
    plans:
      - cps: 100
      - cps: 500
      - cps: 1000

  # エンハンスドロードバランサ + サーバ(垂直スケール)
  # サーバの垂直スケール時にELBからのデタッチ/アタッチを行う
  - type: Server
    name: "elb-server"
    selector:
      names: ["example"]
      zones: ["is1a"]
    parent:
      type: ELB
      selector: "example" #selectorの省略記法、names: ["..."]と同等

  # GSLB + サーバ(垂直スケール)
  # サーバの垂直スケール時にGSLBからのデタッチ/アタッチを行う
  - type: Server
    name: "gslb-server"
    selector:
      names: ["example"]
      zones: ["is1a"]
    parent:
      type: GSLB
      selector: "example"

  # ルータ(垂直スケール)
  - type: Router
    name: "vertical-scalable-router"
    selector:
      names: ["example"]
      zones: ["is1a"]
    # プラン(省略可)
    plans:
      - band_width: 100
      - band_width: 250
      - band_width: 500

## カスタムハンドラーの定義
# handlers:
#   - name: "example"
#     endpoint: "unix:example-handler.sock" # or "localhost:8081"

## オートスケーラーの動作設定
autoscaler:
  cooldown: 600 # ジョブの連続実行を抑止するためのクールダウン期間を秒数で指定。デフォルト: 600(10分)
# 以下のようにup/downごとに指定することも可能(cooldownに直接数値を指定した場合、up/downともに同じ値が設定される)
#  cooldown:
#    up: 600
#    down: 600

  shutdown_grace_period: 600 # SIGINTまたはSIGTERMをを受け取った際の処理完了待ち猶予時間を秒で指定。デフォルト: 600(10分)

#  # Exporterの設定
#  exporter_config:
#    enabled: true
#    address: ":8081"

## さくらのクラウドAPIクライアントの設定(省略可)
#sakuracloud:
#  # プロファイル名を指定(環境変数SAKURACLOUD_PROFILEでの指定も可能)
#  profile: your-profile-name
#
#  # APIトークン/シークレットを指定
#  # (環境変数SAKURACLOUD_ACCESS_TOKEN/SAKURACLOUD_ACCESS_TOKEN_SECRETでの指定も可能)
#  token: your-token
#  secret: your-secret