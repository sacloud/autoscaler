# 操作対象のリソースの定義
resources:
  web:

    # アクションの定義: Up/Downリクエスト時に指定するアクション名をここで定義する
    # アクションごとにハンドラーを限定したい場合に利用したいハンドラーを指定する
    #
    # 例えばELB+サーバを管理対象にしている場合、デフォルトだとどちらも同じタイミングでスケールアップ/ダウンする。
    # それぞれ別のタイミングで操作したい時にここでactionsを定義しておく。
    # Inputsからはアクション名を指定してリクエストを行うことで実行するアクションを決定する。
    #
    #  actions:
    #    server-vertical-scaling:
    #      - server-vertical-scaler
    #      - elb-servers-handler
    #    elb-vertical-scaling:
    #      - elb-vertical-scaler

    # スケールさせたいリソース群をここで定義する
    resources:
      # サーバ(垂直スケール)
      - type: Server
        selector:
          # 操作対象を決定するためにidかnamesを指定する
          id: 123456789012
          # names: ["example"]

          zones: ["is1a"]
        # プラン(省略可)、省略した場合はデフォルトのプラン範囲内でスケールする
        plans:
          - core: 1
            memory: 1
          - core: 2
            memory: 4
          - core: 4
            memory: 8
        # スケール時の動作オプション
        option:
          shutdown_force: true

      # エンハンスドロードバランサ(垂直スケール)
      # - type: ELB
      #   selector:
      #     names: ["example"]
      #   #プラン(省略可)
      #   plans:
      #     - cps: 100
      #     - cps: 500
      #     - cps: 1000

      # エンハンスドロードバランサ + サーバ(垂直スケール)
      # サーバの垂直スケール時にELBからのデタッチ/アタッチを行う
      # - type: ELB
      #   selector:
      #     names: ["example"]
      #   resources:
      #     - type: Server
      #       selector:
      #         names: ["example1"]
      #         zones: ["is1a"]
      #     - type: Server
      #       selector:
      #         names: ["example2"]
      #         zones: ["is1a"]

      # GSLB + サーバ(垂直スケール)
      # サーバの垂直スケール時にGSLBからのデタッチ/アタッチを行う
      # - type: GSLB
      #   selector:
      #     names: ["example"]
      #   resources:
      #     - type: Server
      #       selector:
      #         names: ["example1"]
      #         zones: ["is1a"]
      #     - type: Server
      #       selector:
      #         names: ["example2"]
      #         zones: ["is1a"]

      # ルータ(垂直スケール)
      # - type: Router
      #   selector:
      #     names: ["example"]
      #     zones: ["is1a"]
      #   # プラン(省略可)
      #   plans:
      #     - band_width: 100
      #     - band_width: 250
      #     - band_width: 500

# カスタムハンドラーの定義
# handlers:
#   - name: "example"
#     endpoint: "unix:example-handler.sock" # or "localhost:8081"

# オートスケーラーの動作設定
autoscaler:
  cooldown: 600 # ジョブの連続実行を抑止するためのクールダウン期間を秒数で指定。デフォルト: 600(10分)

# CoreのgRPCエンドポイントのTLS設定(省略可)
#  server_tls_config:
#    cert_file: path/to/server-cert.pem
#    key_file: /path/to/server-key.pem
#    client_auth_type: RequireAndVerifyClientCert
#    client_ca_file: path/to/ca-cert.pem

# カスタムハンドラへのgRPC接続のTLS設定(省略可)
#  handler_tls_config:
#    cert_file: path/to/server-cert.pem
#    key_file: path/to/server-key.pem
#    root_ca_file: path/to/root-ca-chain.pem

# Exporterの設定
#  exporter_config:
#    enabled: true
#    address: ":8081"
#    tls_config:
#      cert_file: path/to/server-cert.pem
#      key_file: /path/to/server-key.pem
#      client_auth_type: RequireAndVerifyClientCert
#      client_ca_file: path/to/ca-cert.pem