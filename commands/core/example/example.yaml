# 操作対象のリソースの定義
resources:
  web:

    # アクションの定義: Up/Downリクエスト時に指定するアクション名をここで定義する
    # アクションごとにハンドラーを限定したい場合に利用したいハンドラーを指定する
    #
    # 例えばELB+サーバを管理対象にしている場合、デフォルトだとどちらも同じタイミングでスケールアップ/ダウンする。
    # それぞれ別のタイミングで操作したい時にここでactionsを定義しておく。
    # Inputsからはアクション名を指定してリクエストを行うことで実行するアクションを決定する。
    #
    #  actions:
    #    server-vertical-scaling:
    #      - server-vertical-scaler
    #      - elb-servers-handler
    #    elb-vertical-scaling:
    #      - elb-vertical-scaler

    # スケールさせたいリソース群をここで定義する
    resources:
      # サーバ(垂直スケール)
      - type: Server
        selector:
          # 操作対象を決定するためにidかnamesを指定する
          id: 123456789012
          # names: ["example"]

          zones: ["is1a"]
        # プラン(省略可)、省略した場合はデフォルトのプラン範囲内でスケールする
        plans:
          - core: 1
            memory: 1
          - core: 2
            memory: 4
          - core: 4
            memory: 8
        # スケール時の動作オプション
        option:
          shutdown_force: true

      # サーバ(水平スケール)
      - type: ServerGroup
        # サーバグループ名、グループ内の各サーバの名前のプレフィックスして利用される(例: server-group-001)
        name: "server-group"
        zone: "is1a"

        min_size: 5   # 最小インスタンス数
        max_size: 20  # 最大インスタンス数

        # プラン一覧(省略可能)
        # Inputsからdesired state nameが指定された場合に利用する名前付きプランを定義する
        # desired state nameが指定されなかった場合はmin_sizeからmax_sizeの間でスケールアウト or インする
        # 例: 現在10台存在する場合:
        #     - UpかつDesiredStateName == "largest"の場合 -> 10台追加
        #     - UpかつDesiredStateName == "" or "default"の場合 -> 1台追加
        plans:
          - name: smallest
            size: 5
          - name: middle
            size: 10
          - name: largest
            size: 20

        template: # 各サーバのテンプレート
          tags: [ "tag1", "tag2" ]
          description: "..."
          interface_driver: "virtio" # virtio or e1000
          shutdown_force: false # ACPIが利用できない場合にtrueにする(強制シャットダウンとなる)
          plan:
            core: 2
            memory: 4
            dedicated_cpu: false

          # NICs
          network_interfaces:
            # 共有セグメントの場合
            - upstream: "shared"

            # スイッチ or ルータ+スイッチに接続する場合
            - upstream:
                names: ["autoscaler-test02"] # セレクター(名前など)で対象スイッチ(or ルータ+スイッチ)を指定

              # NICに割り当てるIPアドレスブロックなどの定義
              assign_cidr_block: "192.168.12.16/28" # NICに割り当てるIPアドレスの範囲をCIDRブロックで指定
              assign_netmask_len: 24                # NICに割り当てるサブネットマスク長
              default_route: "192.168.12.1"

          # ディスク
          disks:
            - name_prefix: "..." # 省略した場合は 'サーバ名+ディスク連番' (例: server-group-001-001)

              # コピー元、以下のいずれかを指定するorブランクディスクの場合は全て空にする
              source_archive:
                names: ["my-app-archive"] # セレクター(名前など)で対象アーカイブを指定
              source_disk:
                names: ["my-app-disk"]    # セレクター(名前など)で対象ディスクを指定
              os_type: "ubuntu2004"       # OSTypeで指定

              plan: "ssd"
              connection: "virtio"
              size: 40

          # 1番目のディスクの対するパラメータ(対応しているアーカイブの場合のみ指定可能)
          edit_parameter:
            disabled: false # ディスクの修正を行わない場合はtrue
            password: "your-password"
            disable_pw_auth: true
            enable_dhcp: false
            change_partition_uuid: true

            # SSH公開鍵の指定
            ssh_keys:
              # ファイルパス or 文字列で指定
              - "~/.ssh/id_rsa.pub"
              - "ssh-rsa ..."

            # スタートアップスクリプト
            # サーバのIPアドレス(共有セグメントの場合の自動割り当て)などを{{ .IPAddress}}のようなGoのテンプレートで利用可能
            startup_scripts:
              # ファイルパス or 文字列で指定
              - "/path/to/your/script.sh"
              - |
                #!/bin/bash

                echo "server name: {{ .Name }}"


      # エンハンスドロードバランサ(垂直スケール)
      # - type: ELB
      #   selector:
      #     names: ["example"]
      #   #プラン(省略可)
      #   plans:
      #     - cps: 100
      #     - cps: 500
      #     - cps: 1000

      # エンハンスドロードバランサ + サーバ(垂直スケール)
      # サーバの垂直スケール時にELBからのデタッチ/アタッチを行う
      # - type: ELB
      #   selector:
      #     names: ["example"]
      #   resources:
      #     - type: Server
      #       selector:
      #         names: ["example1"]
      #         zones: ["is1a"]
      #     - type: Server
      #       selector:
      #         names: ["example2"]
      #         zones: ["is1a"]

      # GSLB + サーバ(垂直スケール)
      # サーバの垂直スケール時にGSLBからのデタッチ/アタッチを行う
      # - type: GSLB
      #   selector:
      #     names: ["example"]
      #   resources:
      #     - type: Server
      #       selector:
      #         names: ["example1"]
      #         zones: ["is1a"]
      #     - type: Server
      #       selector:
      #         names: ["example2"]
      #         zones: ["is1a"]

      # ルータ(垂直スケール)
      # - type: Router
      #   selector:
      #     names: ["example"]
      #     zones: ["is1a"]
      #   # プラン(省略可)
      #   plans:
      #     - band_width: 100
      #     - band_width: 250
      #     - band_width: 500

# カスタムハンドラーの定義
# handlers:
#   - name: "example"
#     endpoint: "unix:example-handler.sock" # or "localhost:8081"

# オートスケーラーの動作設定
autoscaler:
  cooldown: 600 # ジョブの連続実行を抑止するためのクールダウン期間を秒数で指定。デフォルト: 600(10分)

# CoreのgRPCエンドポイントのTLS設定(省略可)
#  server_tls_config:
#    cert_file: path/to/server-cert.pem
#    key_file: /path/to/server-key.pem
#    client_auth_type: RequireAndVerifyClientCert
#    client_ca_file: path/to/ca-cert.pem

# カスタムハンドラへのgRPC接続のTLS設定(省略可)
#  handler_tls_config:
#    cert_file: path/to/server-cert.pem
#    key_file: path/to/server-key.pem
#    root_ca_file: path/to/root-ca-chain.pem

# Exporterの設定
#  exporter_config:
#    enabled: true
#    address: ":8081"
#    tls_config:
#      cert_file: path/to/server-cert.pem
#      key_file: /path/to/server-key.pem
#      client_auth_type: RequireAndVerifyClientCert
#      client_ca_file: path/to/ca-cert.pem