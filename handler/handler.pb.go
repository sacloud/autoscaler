// Copyright 2021-2023 The sacloud/autoscaler Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: handler.proto

package handler

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Handlersが対象リソースをどう扱うべきかを示す
type ResourceInstructions int32

const (
	ResourceInstructions_UNKNOWN ResourceInstructions = 0
	ResourceInstructions_CREATE  ResourceInstructions = 1
	ResourceInstructions_UPDATE  ResourceInstructions = 2
	ResourceInstructions_DELETE  ResourceInstructions = 3
	ResourceInstructions_NOOP    ResourceInstructions = 4 // 特に変更の必要がない状態、参照用のリソースなどで利用される
)

// Enum value maps for ResourceInstructions.
var (
	ResourceInstructions_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
		4: "NOOP",
	}
	ResourceInstructions_value = map[string]int32{
		"UNKNOWN": 0,
		"CREATE":  1,
		"UPDATE":  2,
		"DELETE":  3,
		"NOOP":    4,
	}
)

func (x ResourceInstructions) Enum() *ResourceInstructions {
	p := new(ResourceInstructions)
	*p = x
	return p
}

func (x ResourceInstructions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceInstructions) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[0].Descriptor()
}

func (ResourceInstructions) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[0]
}

func (x ResourceInstructions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceInstructions.Descriptor instead.
func (ResourceInstructions) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{0}
}

// Handleの結果を表す
type PostHandleRequest_ResourceHandleResults int32

const (
	PostHandleRequest_UNKNOWN   PostHandleRequest_ResourceHandleResults = 0
	PostHandleRequest_CREATED   PostHandleRequest_ResourceHandleResults = 1
	PostHandleRequest_UPDATED   PostHandleRequest_ResourceHandleResults = 2
	PostHandleRequest_DELETED   PostHandleRequest_ResourceHandleResults = 3
	PostHandleRequest_NO_CHANGE PostHandleRequest_ResourceHandleResults = 4
)

// Enum value maps for PostHandleRequest_ResourceHandleResults.
var (
	PostHandleRequest_ResourceHandleResults_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATED",
		2: "UPDATED",
		3: "DELETED",
		4: "NO_CHANGE",
	}
	PostHandleRequest_ResourceHandleResults_value = map[string]int32{
		"UNKNOWN":   0,
		"CREATED":   1,
		"UPDATED":   2,
		"DELETED":   3,
		"NO_CHANGE": 4,
	}
)

func (x PostHandleRequest_ResourceHandleResults) Enum() *PostHandleRequest_ResourceHandleResults {
	p := new(PostHandleRequest_ResourceHandleResults)
	*p = x
	return p
}

func (x PostHandleRequest_ResourceHandleResults) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostHandleRequest_ResourceHandleResults) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[1].Descriptor()
}

func (PostHandleRequest_ResourceHandleResults) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[1]
}

func (x PostHandleRequest_ResourceHandleResults) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostHandleRequest_ResourceHandleResults.Descriptor instead.
func (PostHandleRequest_ResourceHandleResults) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{1, 0}
}

type HandleResponse_Status int32

const (
	HandleResponse_UNKNOWN  HandleResponse_Status = 0
	HandleResponse_RECEIVED HandleResponse_Status = 11
	HandleResponse_ACCEPTED HandleResponse_Status = 12
	HandleResponse_RUNNING  HandleResponse_Status = 13
	HandleResponse_DONE     HandleResponse_Status = 14
	HandleResponse_IGNORED  HandleResponse_Status = 15
)

// Enum value maps for HandleResponse_Status.
var (
	HandleResponse_Status_name = map[int32]string{
		0:  "UNKNOWN",
		11: "RECEIVED",
		12: "ACCEPTED",
		13: "RUNNING",
		14: "DONE",
		15: "IGNORED",
	}
	HandleResponse_Status_value = map[string]int32{
		"UNKNOWN":  0,
		"RECEIVED": 11,
		"ACCEPTED": 12,
		"RUNNING":  13,
		"DONE":     14,
		"IGNORED":  15,
	}
)

func (x HandleResponse_Status) Enum() *HandleResponse_Status {
	p := new(HandleResponse_Status)
	*p = x
	return p
}

func (x HandleResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandleResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[2].Descriptor()
}

func (HandleResponse_Status) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[2]
}

func (x HandleResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandleResponse_Status.Descriptor instead.
func (HandleResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{2, 0}
}

// PreHandle/Handle時のリクエストパラメータ
type HandleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inputから引き渡し
	Source       string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// スケールジョブのID
	ScalingJobId string `protobuf:"bytes,3,opt,name=scaling_job_id,json=scalingJobId,proto3" json:"scaling_job_id,omitempty"`
	// ハンドラーへの指示
	Instruction ResourceInstructions `protobuf:"varint,4,opt,name=instruction,proto3,enum=autoscaler.ResourceInstructions" json:"instruction,omitempty"`
	// リソースのあるべき姿
	Desired *Resource `protobuf:"bytes,5,opt,name=desired,proto3" json:"desired,omitempty"`
	// セットアップ完了までの猶予時間(秒数)
	// 1以上が指定されていた場合、各ハンドラ側がリクエストを受け入れた時に猶予時間まで待つ
	// 待ち処理は各ハンドラで適切に実装する必要がある
	SetupGracePeriod uint32 `protobuf:"varint,6,opt,name=setup_grace_period,json=setupGracePeriod,proto3" json:"setup_grace_period,omitempty"`
}

func (x *HandleRequest) Reset() {
	*x = HandleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleRequest) ProtoMessage() {}

func (x *HandleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleRequest.ProtoReflect.Descriptor instead.
func (*HandleRequest) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{0}
}

func (x *HandleRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *HandleRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *HandleRequest) GetScalingJobId() string {
	if x != nil {
		return x.ScalingJobId
	}
	return ""
}

func (x *HandleRequest) GetInstruction() ResourceInstructions {
	if x != nil {
		return x.Instruction
	}
	return ResourceInstructions_UNKNOWN
}

func (x *HandleRequest) GetDesired() *Resource {
	if x != nil {
		return x.Desired
	}
	return nil
}

func (x *HandleRequest) GetSetupGracePeriod() uint32 {
	if x != nil {
		return x.SetupGracePeriod
	}
	return 0
}

// PostHandle時のリクエストパラメータ
type PostHandleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inputから引き渡し
	Source       string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// スケールジョブのID
	ScalingJobId string `protobuf:"bytes,3,opt,name=scaling_job_id,json=scalingJobId,proto3" json:"scaling_job_id,omitempty"`
	// Handleの結果
	Result PostHandleRequest_ResourceHandleResults `protobuf:"varint,4,opt,name=result,proto3,enum=autoscaler.PostHandleRequest_ResourceHandleResults" json:"result,omitempty"`
	// Handleの結果を反映した、リソースの現在の状態
	Current *Resource `protobuf:"bytes,5,opt,name=current,proto3" json:"current,omitempty"`
	// セットアップ完了までの猶予時間(秒数)
	// 1以上が指定されていた場合、各ハンドラ側がリクエストを受け入れた時に猶予時間まで待つ
	// 待ち処理は各ハンドラで適切に実装する必要がある
	SetupGracePeriod uint32 `protobuf:"varint,6,opt,name=setup_grace_period,json=setupGracePeriod,proto3" json:"setup_grace_period,omitempty"`
}

func (x *PostHandleRequest) Reset() {
	*x = PostHandleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostHandleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostHandleRequest) ProtoMessage() {}

func (x *PostHandleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostHandleRequest.ProtoReflect.Descriptor instead.
func (*PostHandleRequest) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{1}
}

func (x *PostHandleRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PostHandleRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *PostHandleRequest) GetScalingJobId() string {
	if x != nil {
		return x.ScalingJobId
	}
	return ""
}

func (x *PostHandleRequest) GetResult() PostHandleRequest_ResourceHandleResults {
	if x != nil {
		return x.Result
	}
	return PostHandleRequest_UNKNOWN
}

func (x *PostHandleRequest) GetCurrent() *Resource {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *PostHandleRequest) GetSetupGracePeriod() uint32 {
	if x != nil {
		return x.SetupGracePeriod
	}
	return 0
}

// Handlersからのストリームレスポンス
type HandleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScalingJobId string                `protobuf:"bytes,1,opt,name=scaling_job_id,json=scalingJobId,proto3" json:"scaling_job_id,omitempty"`
	Status       HandleResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=autoscaler.HandleResponse_Status" json:"status,omitempty"`
	Log          string                `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"` // Handlersが出力する追加的なメッセージ
}

func (x *HandleResponse) Reset() {
	*x = HandleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleResponse) ProtoMessage() {}

func (x *HandleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleResponse.ProtoReflect.Descriptor instead.
func (*HandleResponse) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{2}
}

func (x *HandleResponse) GetScalingJobId() string {
	if x != nil {
		return x.ScalingJobId
	}
	return ""
}

func (x *HandleResponse) GetStatus() HandleResponse_Status {
	if x != nil {
		return x.Status
	}
	return HandleResponse_UNKNOWN
}

func (x *HandleResponse) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

// 汎用リソース型
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resource:
	//
	//	*Resource_Server
	//	*Resource_ServerGroupInstance
	//	*Resource_Elb
	//	*Resource_Gslb
	//	*Resource_Dns
	//	*Resource_Router
	//	*Resource_LoadBalancer
	Resource isResource_Resource `protobuf_oneof:"resource"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{3}
}

func (m *Resource) GetResource() isResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *Resource) GetServer() *Server {
	if x, ok := x.GetResource().(*Resource_Server); ok {
		return x.Server
	}
	return nil
}

func (x *Resource) GetServerGroupInstance() *ServerGroupInstance {
	if x, ok := x.GetResource().(*Resource_ServerGroupInstance); ok {
		return x.ServerGroupInstance
	}
	return nil
}

func (x *Resource) GetElb() *ELB {
	if x, ok := x.GetResource().(*Resource_Elb); ok {
		return x.Elb
	}
	return nil
}

func (x *Resource) GetGslb() *GSLB {
	if x, ok := x.GetResource().(*Resource_Gslb); ok {
		return x.Gslb
	}
	return nil
}

func (x *Resource) GetDns() *DNS {
	if x, ok := x.GetResource().(*Resource_Dns); ok {
		return x.Dns
	}
	return nil
}

func (x *Resource) GetRouter() *Router {
	if x, ok := x.GetResource().(*Resource_Router); ok {
		return x.Router
	}
	return nil
}

func (x *Resource) GetLoadBalancer() *LoadBalancer {
	if x, ok := x.GetResource().(*Resource_LoadBalancer); ok {
		return x.LoadBalancer
	}
	return nil
}

type isResource_Resource interface {
	isResource_Resource()
}

type Resource_Server struct {
	Server *Server `protobuf:"bytes,1,opt,name=server,proto3,oneof"`
}

type Resource_ServerGroupInstance struct {
	ServerGroupInstance *ServerGroupInstance `protobuf:"bytes,2,opt,name=server_group_instance,json=serverGroupInstance,proto3,oneof"`
}

type Resource_Elb struct {
	Elb *ELB `protobuf:"bytes,3,opt,name=elb,proto3,oneof"`
}

type Resource_Gslb struct {
	Gslb *GSLB `protobuf:"bytes,4,opt,name=gslb,proto3,oneof"`
}

type Resource_Dns struct {
	Dns *DNS `protobuf:"bytes,5,opt,name=dns,proto3,oneof"`
}

type Resource_Router struct {
	Router *Router `protobuf:"bytes,6,opt,name=router,proto3,oneof"`
}

type Resource_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,7,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

func (*Resource_Server) isResource_Resource() {}

func (*Resource_ServerGroupInstance) isResource_Resource() {}

func (*Resource_Elb) isResource_Resource() {}

func (*Resource_Gslb) isResource_Resource() {}

func (*Resource_Dns) isResource_Resource() {}

func (*Resource_Router) isResource_Resource() {}

func (*Resource_LoadBalancer) isResource_Resource() {}

type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent          *Parent        `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Id              string         `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	Zone            string         `protobuf:"bytes,12,opt,name=zone,proto3" json:"zone,omitempty"`
	Core            uint32         `protobuf:"varint,13,opt,name=core,proto3" json:"core,omitempty"`
	Memory          uint32         `protobuf:"varint,14,opt,name=memory,proto3" json:"memory,omitempty"`
	DedicatedCpu    bool           `protobuf:"varint,15,opt,name=dedicated_cpu,json=dedicatedCpu,proto3" json:"dedicated_cpu,omitempty"`
	Gpu             uint32         `protobuf:"varint,19,opt,name=gpu,proto3" json:"gpu,omitempty"`
	CpuModel        string         `protobuf:"bytes,20,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`
	AssignedNetwork []*NetworkInfo `protobuf:"bytes,16,rep,name=assigned_network,json=assignedNetwork,proto3" json:"assigned_network,omitempty"`
	Name            string         `protobuf:"bytes,17,opt,name=name,proto3" json:"name,omitempty"`
	ShutdownForce   bool           `protobuf:"varint,18,opt,name=shutdown_force,json=shutdownForce,proto3" json:"shutdown_force,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{4}
}

func (x *Server) GetParent() *Parent {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Server) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Server) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Server) GetCore() uint32 {
	if x != nil {
		return x.Core
	}
	return 0
}

func (x *Server) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Server) GetDedicatedCpu() bool {
	if x != nil {
		return x.DedicatedCpu
	}
	return false
}

func (x *Server) GetGpu() uint32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *Server) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *Server) GetAssignedNetwork() []*NetworkInfo {
	if x != nil {
		return x.AssignedNetwork
	}
	return nil
}

func (x *Server) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Server) GetShutdownForce() bool {
	if x != nil {
		return x.ShutdownForce
	}
	return false
}

type ServerGroupInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent *Parent `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Id     string  `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"` // 新規作成指示時は空
	Zone   string  `protobuf:"bytes,12,opt,name=zone,proto3" json:"zone,omitempty"`
	// plan
	Core          uint32 `protobuf:"varint,13,opt,name=core,proto3" json:"core,omitempty"`
	Memory        uint32 `protobuf:"varint,14,opt,name=memory,proto3" json:"memory,omitempty"`
	DedicatedCpu  bool   `protobuf:"varint,15,opt,name=dedicated_cpu,json=dedicatedCpu,proto3" json:"dedicated_cpu,omitempty"`
	Gpu           uint32 `protobuf:"varint,28,opt,name=gpu,proto3" json:"gpu,omitempty"`
	CpuModel      string `protobuf:"bytes,29,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`
	PrivateHostId string `protobuf:"bytes,16,opt,name=private_host_id,json=privateHostId,proto3" json:"private_host_id,omitempty"`
	// disks
	Disks []*ServerGroupInstance_Disk `protobuf:"bytes,17,rep,name=disks,proto3" json:"disks,omitempty"`
	// ディスクの修正関連
	EditParameter *ServerGroupInstance_EditParameter `protobuf:"bytes,18,opt,name=edit_parameter,json=editParameter,proto3" json:"edit_parameter,omitempty"` // 1番目のディスクにのみ有効
	CloudConfig   string                             `protobuf:"bytes,27,opt,name=cloud_config,json=cloudConfig,proto3" json:"cloud_config,omitempty"`
	// networks
	NetworkInterfaces []*ServerGroupInstance_NIC `protobuf:"bytes,19,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	// misc
	CdRomId         string `protobuf:"bytes,20,opt,name=cd_rom_id,json=cdRomId,proto3" json:"cd_rom_id,omitempty"`
	InterfaceDriver string `protobuf:"bytes,21,opt,name=interface_driver,json=interfaceDriver,proto3" json:"interface_driver,omitempty"`
	// common
	Name          string   `protobuf:"bytes,22,opt,name=name,proto3" json:"name,omitempty"`
	Tags          []string `protobuf:"bytes,23,rep,name=tags,proto3" json:"tags,omitempty"`
	Description   string   `protobuf:"bytes,24,opt,name=description,proto3" json:"description,omitempty"`
	IconId        string   `protobuf:"bytes,25,opt,name=icon_id,json=iconId,proto3" json:"icon_id,omitempty"`
	ShutdownForce bool     `protobuf:"varint,26,opt,name=shutdown_force,json=shutdownForce,proto3" json:"shutdown_force,omitempty"`
}

func (x *ServerGroupInstance) Reset() {
	*x = ServerGroupInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGroupInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGroupInstance) ProtoMessage() {}

func (x *ServerGroupInstance) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGroupInstance.ProtoReflect.Descriptor instead.
func (*ServerGroupInstance) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{5}
}

func (x *ServerGroupInstance) GetParent() *Parent {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ServerGroupInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerGroupInstance) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ServerGroupInstance) GetCore() uint32 {
	if x != nil {
		return x.Core
	}
	return 0
}

func (x *ServerGroupInstance) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ServerGroupInstance) GetDedicatedCpu() bool {
	if x != nil {
		return x.DedicatedCpu
	}
	return false
}

func (x *ServerGroupInstance) GetGpu() uint32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *ServerGroupInstance) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *ServerGroupInstance) GetPrivateHostId() string {
	if x != nil {
		return x.PrivateHostId
	}
	return ""
}

func (x *ServerGroupInstance) GetDisks() []*ServerGroupInstance_Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *ServerGroupInstance) GetEditParameter() *ServerGroupInstance_EditParameter {
	if x != nil {
		return x.EditParameter
	}
	return nil
}

func (x *ServerGroupInstance) GetCloudConfig() string {
	if x != nil {
		return x.CloudConfig
	}
	return ""
}

func (x *ServerGroupInstance) GetNetworkInterfaces() []*ServerGroupInstance_NIC {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *ServerGroupInstance) GetCdRomId() string {
	if x != nil {
		return x.CdRomId
	}
	return ""
}

func (x *ServerGroupInstance) GetInterfaceDriver() string {
	if x != nil {
		return x.InterfaceDriver
	}
	return ""
}

func (x *ServerGroupInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServerGroupInstance) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ServerGroupInstance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServerGroupInstance) GetIconId() string {
	if x != nil {
		return x.IconId
	}
	return ""
}

func (x *ServerGroupInstance) GetShutdownForce() bool {
	if x != nil {
		return x.ShutdownForce
	}
	return false
}

type ELB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent           *Parent `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Id               string  `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	Region           string  `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	Plan             uint32  `protobuf:"varint,13,opt,name=plan,proto3" json:"plan,omitempty"`
	VirtualIpAddress string  `protobuf:"bytes,14,opt,name=virtual_ip_address,json=virtualIpAddress,proto3" json:"virtual_ip_address,omitempty"`
	Fqdn             string  `protobuf:"bytes,15,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Name             string  `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ELB) Reset() {
	*x = ELB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ELB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ELB) ProtoMessage() {}

func (x *ELB) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ELB.ProtoReflect.Descriptor instead.
func (*ELB) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{6}
}

func (x *ELB) GetParent() *Parent {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ELB) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ELB) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ELB) GetPlan() uint32 {
	if x != nil {
		return x.Plan
	}
	return 0
}

func (x *ELB) GetVirtualIpAddress() string {
	if x != nil {
		return x.VirtualIpAddress
	}
	return ""
}

func (x *ELB) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *ELB) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GSLB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string        `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	Fqdn    string        `protobuf:"bytes,12,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Servers []*GSLBServer `protobuf:"bytes,13,rep,name=servers,proto3" json:"servers,omitempty"`
	Name    string        `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GSLB) Reset() {
	*x = GSLB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSLB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSLB) ProtoMessage() {}

func (x *GSLB) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSLB.ProtoReflect.Descriptor instead.
func (*GSLB) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{7}
}

func (x *GSLB) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GSLB) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *GSLB) GetServers() []*GSLBServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *GSLB) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GSLBServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,11,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Enabled   bool   `protobuf:"varint,12,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Weight    uint32 `protobuf:"varint,13,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *GSLBServer) Reset() {
	*x = GSLBServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSLBServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSLBServer) ProtoMessage() {}

func (x *GSLBServer) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSLBServer.ProtoReflect.Descriptor instead.
func (*GSLBServer) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{8}
}

func (x *GSLBServer) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *GSLBServer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GSLBServer) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type DNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	Zone       string   `protobuf:"bytes,12,opt,name=zone,proto3" json:"zone,omitempty"`
	DnsServers []string `protobuf:"bytes,13,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
}

func (x *DNS) Reset() {
	*x = DNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNS) ProtoMessage() {}

func (x *DNS) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNS.ProtoReflect.Descriptor instead.
func (*DNS) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{9}
}

func (x *DNS) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DNS) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *DNS) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

type Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	Zone      string `protobuf:"bytes,12,opt,name=zone,proto3" json:"zone,omitempty"`
	BandWidth uint32 `protobuf:"varint,13,opt,name=band_width,json=bandWidth,proto3" json:"band_width,omitempty"`
	Name      string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Router) Reset() {
	*x = Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{10}
}

func (x *Router) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Router) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Router) GetBandWidth() uint32 {
	if x != nil {
		return x.BandWidth
	}
	return 0
}

func (x *Router) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LoadBalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string             `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	Zone               string             `protobuf:"bytes,12,opt,name=zone,proto3" json:"zone,omitempty"`
	VirtualIpAddresses []*LoadBalancerVIP `protobuf:"bytes,13,rep,name=virtual_ip_addresses,json=virtualIpAddresses,proto3" json:"virtual_ip_addresses,omitempty"`
	Name               string             `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LoadBalancer) Reset() {
	*x = LoadBalancer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancer) ProtoMessage() {}

func (x *LoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancer.ProtoReflect.Descriptor instead.
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{11}
}

func (x *LoadBalancer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoadBalancer) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *LoadBalancer) GetVirtualIpAddresses() []*LoadBalancerVIP {
	if x != nil {
		return x.VirtualIpAddresses
	}
	return nil
}

func (x *LoadBalancer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LoadBalancerVIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string                `protobuf:"bytes,11,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Port      uint32                `protobuf:"varint,12,opt,name=port,proto3" json:"port,omitempty"`
	Servers   []*LoadBalancerServer `protobuf:"bytes,13,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *LoadBalancerVIP) Reset() {
	*x = LoadBalancerVIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerVIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerVIP) ProtoMessage() {}

func (x *LoadBalancerVIP) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerVIP.ProtoReflect.Descriptor instead.
func (*LoadBalancerVIP) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{12}
}

func (x *LoadBalancerVIP) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *LoadBalancerVIP) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LoadBalancerVIP) GetServers() []*LoadBalancerServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

type LoadBalancerServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,11,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Enabled   bool   `protobuf:"varint,12,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *LoadBalancerServer) Reset() {
	*x = LoadBalancerServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerServer) ProtoMessage() {}

func (x *LoadBalancerServer) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerServer.ProtoReflect.Descriptor instead.
func (*LoadBalancerServer) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{13}
}

func (x *LoadBalancerServer) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *LoadBalancerServer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Parent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resource:
	//
	//	*Parent_Elb
	//	*Parent_Gslb
	//	*Parent_Dns
	//	*Parent_LoadBalancer
	Resource isParent_Resource `protobuf_oneof:"resource"`
}

func (x *Parent) Reset() {
	*x = Parent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parent) ProtoMessage() {}

func (x *Parent) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parent.ProtoReflect.Descriptor instead.
func (*Parent) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{14}
}

func (m *Parent) GetResource() isParent_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *Parent) GetElb() *ELB {
	if x, ok := x.GetResource().(*Parent_Elb); ok {
		return x.Elb
	}
	return nil
}

func (x *Parent) GetGslb() *GSLB {
	if x, ok := x.GetResource().(*Parent_Gslb); ok {
		return x.Gslb
	}
	return nil
}

func (x *Parent) GetDns() *DNS {
	if x, ok := x.GetResource().(*Parent_Dns); ok {
		return x.Dns
	}
	return nil
}

func (x *Parent) GetLoadBalancer() *LoadBalancer {
	if x, ok := x.GetResource().(*Parent_LoadBalancer); ok {
		return x.LoadBalancer
	}
	return nil
}

type isParent_Resource interface {
	isParent_Resource()
}

type Parent_Elb struct {
	Elb *ELB `protobuf:"bytes,11,opt,name=elb,proto3,oneof"`
}

type Parent_Gslb struct {
	Gslb *GSLB `protobuf:"bytes,12,opt,name=gslb,proto3,oneof"`
}

type Parent_Dns struct {
	Dns *DNS `protobuf:"bytes,13,opt,name=dns,proto3,oneof"`
}

type Parent_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,14,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

func (*Parent_Elb) isParent_Resource() {}

func (*Parent_Gslb) isParent_Resource() {}

func (*Parent_Dns) isParent_Resource() {}

func (*Parent_LoadBalancer) isParent_Resource() {}

type NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,11,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Netmask   uint32 `protobuf:"varint,12,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Gateway   string `protobuf:"bytes,13,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Index     uint32 `protobuf:"varint,14,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *NetworkInfo) Reset() {
	*x = NetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo) ProtoMessage() {}

func (x *NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo.ProtoReflect.Descriptor instead.
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{15}
}

func (x *NetworkInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *NetworkInfo) GetNetmask() uint32 {
	if x != nil {
		return x.Netmask
	}
	return 0
}

func (x *NetworkInfo) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *NetworkInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ServerGroupInstance_Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"` // 新規作成指示時は空
	Zone string `protobuf:"bytes,12,opt,name=zone,proto3" json:"zone,omitempty"`
	// sources
	SourceArchiveId string `protobuf:"bytes,13,opt,name=source_archive_id,json=sourceArchiveId,proto3" json:"source_archive_id,omitempty"`
	SourceDiskId    string `protobuf:"bytes,14,opt,name=source_disk_id,json=sourceDiskId,proto3" json:"source_disk_id,omitempty"`
	// spec
	Plan       string `protobuf:"bytes,15,opt,name=plan,proto3" json:"plan,omitempty"`             // ssd or hdd
	Connection string `protobuf:"bytes,16,opt,name=connection,proto3" json:"connection,omitempty"` // virtio or ide
	Size       uint32 `protobuf:"varint,17,opt,name=size,proto3" json:"size,omitempty"`
	// common
	Name        string   `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	Tags        []string `protobuf:"bytes,19,rep,name=tags,proto3" json:"tags,omitempty"`
	Description string   `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	IconId      string   `protobuf:"bytes,21,opt,name=icon_id,json=iconId,proto3" json:"icon_id,omitempty"`
}

func (x *ServerGroupInstance_Disk) Reset() {
	*x = ServerGroupInstance_Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGroupInstance_Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGroupInstance_Disk) ProtoMessage() {}

func (x *ServerGroupInstance_Disk) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGroupInstance_Disk.ProtoReflect.Descriptor instead.
func (*ServerGroupInstance_Disk) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ServerGroupInstance_Disk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerGroupInstance_Disk) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ServerGroupInstance_Disk) GetSourceArchiveId() string {
	if x != nil {
		return x.SourceArchiveId
	}
	return ""
}

func (x *ServerGroupInstance_Disk) GetSourceDiskId() string {
	if x != nil {
		return x.SourceDiskId
	}
	return ""
}

func (x *ServerGroupInstance_Disk) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *ServerGroupInstance_Disk) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *ServerGroupInstance_Disk) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ServerGroupInstance_Disk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServerGroupInstance_Disk) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ServerGroupInstance_Disk) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServerGroupInstance_Disk) GetIconId() string {
	if x != nil {
		return x.IconId
	}
	return ""
}

type ServerGroupInstance_EditParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName            string   `protobuf:"bytes,11,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	Password            string   `protobuf:"bytes,12,opt,name=password,proto3" json:"password,omitempty"`
	DisablePasswordAuth bool     `protobuf:"varint,13,opt,name=disable_password_auth,json=disablePasswordAuth,proto3" json:"disable_password_auth,omitempty"`
	EnableDhcp          bool     `protobuf:"varint,14,opt,name=enable_dhcp,json=enableDhcp,proto3" json:"enable_dhcp,omitempty"`
	ChangePartitionUuid bool     `protobuf:"varint,15,opt,name=change_partition_uuid,json=changePartitionUuid,proto3" json:"change_partition_uuid,omitempty"`
	IpAddress           string   `protobuf:"bytes,16,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	NetworkMaskLen      uint32   `protobuf:"varint,17,opt,name=network_mask_len,json=networkMaskLen,proto3" json:"network_mask_len,omitempty"`
	DefaultRoute        string   `protobuf:"bytes,18,opt,name=default_route,json=defaultRoute,proto3" json:"default_route,omitempty"`
	SshKeys             []string `protobuf:"bytes,19,rep,name=ssh_keys,json=sshKeys,proto3" json:"ssh_keys,omitempty"`
	SshKeyIds           []string `protobuf:"bytes,20,rep,name=ssh_key_ids,json=sshKeyIds,proto3" json:"ssh_key_ids,omitempty"`
	StartupScripts      []string `protobuf:"bytes,21,rep,name=startup_scripts,json=startupScripts,proto3" json:"startup_scripts,omitempty"`
}

func (x *ServerGroupInstance_EditParameter) Reset() {
	*x = ServerGroupInstance_EditParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGroupInstance_EditParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGroupInstance_EditParameter) ProtoMessage() {}

func (x *ServerGroupInstance_EditParameter) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGroupInstance_EditParameter.ProtoReflect.Descriptor instead.
func (*ServerGroupInstance_EditParameter) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{5, 1}
}

func (x *ServerGroupInstance_EditParameter) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ServerGroupInstance_EditParameter) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ServerGroupInstance_EditParameter) GetDisablePasswordAuth() bool {
	if x != nil {
		return x.DisablePasswordAuth
	}
	return false
}

func (x *ServerGroupInstance_EditParameter) GetEnableDhcp() bool {
	if x != nil {
		return x.EnableDhcp
	}
	return false
}

func (x *ServerGroupInstance_EditParameter) GetChangePartitionUuid() bool {
	if x != nil {
		return x.ChangePartitionUuid
	}
	return false
}

func (x *ServerGroupInstance_EditParameter) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ServerGroupInstance_EditParameter) GetNetworkMaskLen() uint32 {
	if x != nil {
		return x.NetworkMaskLen
	}
	return 0
}

func (x *ServerGroupInstance_EditParameter) GetDefaultRoute() string {
	if x != nil {
		return x.DefaultRoute
	}
	return ""
}

func (x *ServerGroupInstance_EditParameter) GetSshKeys() []string {
	if x != nil {
		return x.SshKeys
	}
	return nil
}

func (x *ServerGroupInstance_EditParameter) GetSshKeyIds() []string {
	if x != nil {
		return x.SshKeyIds
	}
	return nil
}

func (x *ServerGroupInstance_EditParameter) GetStartupScripts() []string {
	if x != nil {
		return x.StartupScripts
	}
	return nil
}

type ServerGroupInstance_NIC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Upstream        string                          `protobuf:"bytes,11,opt,name=upstream,proto3" json:"upstream,omitempty"`
	PacketFilterId  string                          `protobuf:"bytes,12,opt,name=packet_filter_id,json=packetFilterId,proto3" json:"packet_filter_id,omitempty"`
	UserIpAddress   string                          `protobuf:"bytes,13,opt,name=user_ip_address,json=userIpAddress,proto3" json:"user_ip_address,omitempty"`
	AssignedNetwork *NetworkInfo                    `protobuf:"bytes,14,opt,name=assigned_network,json=assignedNetwork,proto3" json:"assigned_network,omitempty"`
	ExposeInfo      *ServerGroupInstance_ExposeInfo `protobuf:"bytes,15,opt,name=expose_info,json=exposeInfo,proto3" json:"expose_info,omitempty"`
}

func (x *ServerGroupInstance_NIC) Reset() {
	*x = ServerGroupInstance_NIC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGroupInstance_NIC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGroupInstance_NIC) ProtoMessage() {}

func (x *ServerGroupInstance_NIC) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGroupInstance_NIC.ProtoReflect.Descriptor instead.
func (*ServerGroupInstance_NIC) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{5, 2}
}

func (x *ServerGroupInstance_NIC) GetUpstream() string {
	if x != nil {
		return x.Upstream
	}
	return ""
}

func (x *ServerGroupInstance_NIC) GetPacketFilterId() string {
	if x != nil {
		return x.PacketFilterId
	}
	return ""
}

func (x *ServerGroupInstance_NIC) GetUserIpAddress() string {
	if x != nil {
		return x.UserIpAddress
	}
	return ""
}

func (x *ServerGroupInstance_NIC) GetAssignedNetwork() *NetworkInfo {
	if x != nil {
		return x.AssignedNetwork
	}
	return nil
}

func (x *ServerGroupInstance_NIC) GetExposeInfo() *ServerGroupInstance_ExposeInfo {
	if x != nil {
		return x.ExposeInfo
	}
	return nil
}

// NICに紐づくネットワーク公開情報
// 上流リソースの操作のための定義を含む
type ServerGroupInstance_ExposeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ports           []uint32                         `protobuf:"varint,11,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	ServerGroupName string                           `protobuf:"bytes,12,opt,name=server_group_name,json=serverGroupName,proto3" json:"server_group_name,omitempty"` // ELB向け
	Weight          uint32                           `protobuf:"varint,13,opt,name=weight,proto3" json:"weight,omitempty"`                                           // GSLB向け
	Vips            []string                         `protobuf:"bytes,14,rep,name=vips,proto3" json:"vips,omitempty"`                                                // LB向け
	HealthCheck     *ServerGroupInstance_HealthCheck `protobuf:"bytes,15,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`               // LB向け
	RecordName      string                           `protobuf:"bytes,16,opt,name=record_name,json=recordName,proto3" json:"record_name,omitempty"`                  // DNS向け
	Ttl             uint32                           `protobuf:"varint,17,opt,name=ttl,proto3" json:"ttl,omitempty"`                                                 // DNS向け
}

func (x *ServerGroupInstance_ExposeInfo) Reset() {
	*x = ServerGroupInstance_ExposeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGroupInstance_ExposeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGroupInstance_ExposeInfo) ProtoMessage() {}

func (x *ServerGroupInstance_ExposeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGroupInstance_ExposeInfo.ProtoReflect.Descriptor instead.
func (*ServerGroupInstance_ExposeInfo) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{5, 3}
}

func (x *ServerGroupInstance_ExposeInfo) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ServerGroupInstance_ExposeInfo) GetServerGroupName() string {
	if x != nil {
		return x.ServerGroupName
	}
	return ""
}

func (x *ServerGroupInstance_ExposeInfo) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ServerGroupInstance_ExposeInfo) GetVips() []string {
	if x != nil {
		return x.Vips
	}
	return nil
}

func (x *ServerGroupInstance_ExposeInfo) GetHealthCheck() *ServerGroupInstance_HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *ServerGroupInstance_ExposeInfo) GetRecordName() string {
	if x != nil {
		return x.RecordName
	}
	return ""
}

func (x *ServerGroupInstance_ExposeInfo) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type ServerGroupInstance_HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol   string `protobuf:"bytes,11,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Path       string `protobuf:"bytes,12,opt,name=path,proto3" json:"path,omitempty"`
	StatusCode uint32 `protobuf:"varint,13,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *ServerGroupInstance_HealthCheck) Reset() {
	*x = ServerGroupInstance_HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGroupInstance_HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGroupInstance_HealthCheck) ProtoMessage() {}

func (x *ServerGroupInstance_HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGroupInstance_HealthCheck.ProtoReflect.Descriptor instead.
func (*ServerGroupInstance_HealthCheck) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{5, 4}
}

func (x *ServerGroupInstance_HealthCheck) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ServerGroupInstance_HealthCheck) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ServerGroupInstance_HealthCheck) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

var File_handler_proto protoreflect.FileDescriptor

var file_handler_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x22, 0x94, 0x02, 0x0a, 0x0d,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x73, 0x65, 0x74, 0x75, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x22, 0xfd, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x74, 0x75, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x5a, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x04, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x5b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45,
	0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x0f, 0x22,
	0x04, 0x08, 0x01, 0x10, 0x0a, 0x22, 0xfc, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x55, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x6c, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x45, 0x4c, 0x42, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6c, 0x62, 0x12, 0x26, 0x0a, 0x04,
	0x67, 0x73, 0x6c, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x53, 0x4c, 0x42, 0x48, 0x00, 0x52, 0x04,
	0x67, 0x73, 0x6c, 0x62, 0x12, 0x23, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44,
	0x4e, 0x53, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x70, 0x75,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67,
	0x70, 0x75, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x42, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x0b, 0x22, 0xc2, 0x10, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x70, 0x75, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x70, 0x75, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73,
	0x12, 0x54, 0x0a, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x12, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x49, 0x43, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x09, 0x63, 0x64, 0x5f, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x64, 0x52, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x1a, 0xad,
	0x02, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x0b, 0x1a, 0xa9,
	0x03, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x68, 0x63, 0x70, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x0b, 0x1a, 0x8a, 0x02, 0x0a, 0x03, 0x4e,
	0x49, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x42, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x0b, 0x1a, 0x83, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x76, 0x69, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x0b, 0x1a, 0x64, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x0b, 0x22, 0xc9, 0x01, 0x0a, 0x03, 0x45, 0x4c,
	0x42, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x0b, 0x22, 0x76, 0x0a, 0x04, 0x47, 0x53, 0x4c, 0x42, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64,
	0x6e, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x47, 0x53, 0x4c, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x0b, 0x22, 0x63, 0x0a,
	0x0a, 0x47, 0x53, 0x4c, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x0b, 0x22, 0x50, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x0b, 0x22, 0x65, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x0b, 0x22, 0x9b, 0x01, 0x0a, 0x0c,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x4d, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x56, 0x49, 0x50, 0x52, 0x12, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x0b, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x56, 0x49, 0x50, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x0b,
	0x22, 0x53, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x0b, 0x22, 0xcd, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x03, 0x65, 0x6c, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x4c, 0x42, 0x48, 0x00,
	0x52, 0x03, 0x65, 0x6c, 0x62, 0x12, 0x26, 0x0a, 0x04, 0x67, 0x73, 0x6c, 0x62, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x47, 0x53, 0x4c, 0x42, 0x48, 0x00, 0x52, 0x04, 0x67, 0x73, 0x6c, 0x62, 0x12, 0x23, 0x0a,
	0x03, 0x64, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x4e, 0x53, 0x48, 0x00, 0x52, 0x03, 0x64,
	0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x0b, 0x22, 0x7c, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x0b, 0x2a, 0x51, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x04, 0x32, 0xe3, 0x01, 0x0a, 0x0d, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x41,
	0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x49, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x1d, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x27, 0x5a, 0x25,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_handler_proto_rawDescOnce sync.Once
	file_handler_proto_rawDescData = file_handler_proto_rawDesc
)

func file_handler_proto_rawDescGZIP() []byte {
	file_handler_proto_rawDescOnce.Do(func() {
		file_handler_proto_rawDescData = protoimpl.X.CompressGZIP(file_handler_proto_rawDescData)
	})
	return file_handler_proto_rawDescData
}

var file_handler_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_handler_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_handler_proto_goTypes = []interface{}{
	(ResourceInstructions)(0),                    // 0: autoscaler.ResourceInstructions
	(PostHandleRequest_ResourceHandleResults)(0), // 1: autoscaler.PostHandleRequest.ResourceHandleResults
	(HandleResponse_Status)(0),                   // 2: autoscaler.HandleResponse.Status
	(*HandleRequest)(nil),                        // 3: autoscaler.HandleRequest
	(*PostHandleRequest)(nil),                    // 4: autoscaler.PostHandleRequest
	(*HandleResponse)(nil),                       // 5: autoscaler.HandleResponse
	(*Resource)(nil),                             // 6: autoscaler.Resource
	(*Server)(nil),                               // 7: autoscaler.Server
	(*ServerGroupInstance)(nil),                  // 8: autoscaler.ServerGroupInstance
	(*ELB)(nil),                                  // 9: autoscaler.ELB
	(*GSLB)(nil),                                 // 10: autoscaler.GSLB
	(*GSLBServer)(nil),                           // 11: autoscaler.GSLBServer
	(*DNS)(nil),                                  // 12: autoscaler.DNS
	(*Router)(nil),                               // 13: autoscaler.Router
	(*LoadBalancer)(nil),                         // 14: autoscaler.LoadBalancer
	(*LoadBalancerVIP)(nil),                      // 15: autoscaler.LoadBalancerVIP
	(*LoadBalancerServer)(nil),                   // 16: autoscaler.LoadBalancerServer
	(*Parent)(nil),                               // 17: autoscaler.Parent
	(*NetworkInfo)(nil),                          // 18: autoscaler.NetworkInfo
	(*ServerGroupInstance_Disk)(nil),             // 19: autoscaler.ServerGroupInstance.Disk
	(*ServerGroupInstance_EditParameter)(nil),    // 20: autoscaler.ServerGroupInstance.EditParameter
	(*ServerGroupInstance_NIC)(nil),              // 21: autoscaler.ServerGroupInstance.NIC
	(*ServerGroupInstance_ExposeInfo)(nil),       // 22: autoscaler.ServerGroupInstance.ExposeInfo
	(*ServerGroupInstance_HealthCheck)(nil),      // 23: autoscaler.ServerGroupInstance.HealthCheck
}
var file_handler_proto_depIdxs = []int32{
	0,  // 0: autoscaler.HandleRequest.instruction:type_name -> autoscaler.ResourceInstructions
	6,  // 1: autoscaler.HandleRequest.desired:type_name -> autoscaler.Resource
	1,  // 2: autoscaler.PostHandleRequest.result:type_name -> autoscaler.PostHandleRequest.ResourceHandleResults
	6,  // 3: autoscaler.PostHandleRequest.current:type_name -> autoscaler.Resource
	2,  // 4: autoscaler.HandleResponse.status:type_name -> autoscaler.HandleResponse.Status
	7,  // 5: autoscaler.Resource.server:type_name -> autoscaler.Server
	8,  // 6: autoscaler.Resource.server_group_instance:type_name -> autoscaler.ServerGroupInstance
	9,  // 7: autoscaler.Resource.elb:type_name -> autoscaler.ELB
	10, // 8: autoscaler.Resource.gslb:type_name -> autoscaler.GSLB
	12, // 9: autoscaler.Resource.dns:type_name -> autoscaler.DNS
	13, // 10: autoscaler.Resource.router:type_name -> autoscaler.Router
	14, // 11: autoscaler.Resource.load_balancer:type_name -> autoscaler.LoadBalancer
	17, // 12: autoscaler.Server.parent:type_name -> autoscaler.Parent
	18, // 13: autoscaler.Server.assigned_network:type_name -> autoscaler.NetworkInfo
	17, // 14: autoscaler.ServerGroupInstance.parent:type_name -> autoscaler.Parent
	19, // 15: autoscaler.ServerGroupInstance.disks:type_name -> autoscaler.ServerGroupInstance.Disk
	20, // 16: autoscaler.ServerGroupInstance.edit_parameter:type_name -> autoscaler.ServerGroupInstance.EditParameter
	21, // 17: autoscaler.ServerGroupInstance.network_interfaces:type_name -> autoscaler.ServerGroupInstance.NIC
	17, // 18: autoscaler.ELB.parent:type_name -> autoscaler.Parent
	11, // 19: autoscaler.GSLB.servers:type_name -> autoscaler.GSLBServer
	15, // 20: autoscaler.LoadBalancer.virtual_ip_addresses:type_name -> autoscaler.LoadBalancerVIP
	16, // 21: autoscaler.LoadBalancerVIP.servers:type_name -> autoscaler.LoadBalancerServer
	9,  // 22: autoscaler.Parent.elb:type_name -> autoscaler.ELB
	10, // 23: autoscaler.Parent.gslb:type_name -> autoscaler.GSLB
	12, // 24: autoscaler.Parent.dns:type_name -> autoscaler.DNS
	14, // 25: autoscaler.Parent.load_balancer:type_name -> autoscaler.LoadBalancer
	18, // 26: autoscaler.ServerGroupInstance.NIC.assigned_network:type_name -> autoscaler.NetworkInfo
	22, // 27: autoscaler.ServerGroupInstance.NIC.expose_info:type_name -> autoscaler.ServerGroupInstance.ExposeInfo
	23, // 28: autoscaler.ServerGroupInstance.ExposeInfo.health_check:type_name -> autoscaler.ServerGroupInstance.HealthCheck
	3,  // 29: autoscaler.HandleService.PreHandle:input_type -> autoscaler.HandleRequest
	3,  // 30: autoscaler.HandleService.Handle:input_type -> autoscaler.HandleRequest
	4,  // 31: autoscaler.HandleService.PostHandle:input_type -> autoscaler.PostHandleRequest
	5,  // 32: autoscaler.HandleService.PreHandle:output_type -> autoscaler.HandleResponse
	5,  // 33: autoscaler.HandleService.Handle:output_type -> autoscaler.HandleResponse
	5,  // 34: autoscaler.HandleService.PostHandle:output_type -> autoscaler.HandleResponse
	32, // [32:35] is the sub-list for method output_type
	29, // [29:32] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_handler_proto_init() }
func file_handler_proto_init() {
	if File_handler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_handler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostHandleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGroupInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ELB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSLB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSLBServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerVIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGroupInstance_Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGroupInstance_EditParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGroupInstance_NIC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGroupInstance_ExposeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGroupInstance_HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_handler_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Resource_Server)(nil),
		(*Resource_ServerGroupInstance)(nil),
		(*Resource_Elb)(nil),
		(*Resource_Gslb)(nil),
		(*Resource_Dns)(nil),
		(*Resource_Router)(nil),
		(*Resource_LoadBalancer)(nil),
	}
	file_handler_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Parent_Elb)(nil),
		(*Parent_Gslb)(nil),
		(*Parent_Dns)(nil),
		(*Parent_LoadBalancer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_handler_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_handler_proto_goTypes,
		DependencyIndexes: file_handler_proto_depIdxs,
		EnumInfos:         file_handler_proto_enumTypes,
		MessageInfos:      file_handler_proto_msgTypes,
	}.Build()
	File_handler_proto = out.File
	file_handler_proto_rawDesc = nil
	file_handler_proto_goTypes = nil
	file_handler_proto_depIdxs = nil
}
