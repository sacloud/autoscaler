syntax            = "proto3";
option go_package = "github.com/sacloud/autoscaler/handler";

package autoscaler;

// Handlersサービス定義
//
// sacloud/autoscalerのHandlersがサービスを公開し、Coreがクライアントとして実装する
// 一連のrpcは操作対象のリソースごとに順次呼ばれる
//
// 例:
// 親リソース(リソース1)+子リソース(リソース2)を操作する場合以下の順で呼ばれる
//
//   - リソース2: PreHandle
//   - リソース2: Handle
//   - リソース2: PostHandle
//
//   - リソース1: PreHandle
//   - リソース1: Handle
//   - リソース1: PostHandle
service HandleService {
  // リソース操作の前イベント
  rpc PreHandle(HandleRequest) returns (stream HandleResponse);
  // リソース操作
  rpc Handle(HandleRequest) returns (stream HandleResponse);
  // リソース操作の後イベント
  rpc PostHandle(PostHandleRequest) returns (stream HandleResponse);
}

// PreHandle/Handle時のリクエストパラメータ
message HandleRequest {
  // Inputから引き渡し
  string source        = 1;
  string resource_name = 2;

  // スケールジョブのID
  string scaling_job_id = 3;

  // ハンドラーへの指示
  ResourceInstructions instruction = 4;

  // リソースのあるべき姿
  Resource desired = 5;
}

// PostHandle時のリクエストパラメータ
message PostHandleRequest {
  // Handleの結果を表す
  enum ResourceHandleResults {
    UNKNOWN   = 0;
    CREATED   = 1;
    UPDATED   = 2;
    DELETED   = 3;
    NO_CHANGE = 4;
  }

  // Inputから引き渡し
  string source        = 1;
  string resource_name = 2;

  // スケールジョブのID
  string scaling_job_id = 3;

  // Handleの結果
  ResourceHandleResults result = 4;

  // Handleの結果を反映した、リソースの現在の状態
  Resource current = 5;
}

// Handlersからのストリームレスポンス
message HandleResponse {
  enum Status {
    reserved 1 to 10;

    UNKNOWN  = 0;
    RECEIVED = 11;
    ACCEPTED = 12;
    RUNNING  = 13;
    DONE     = 14;
    IGNORED  = 15;
    CANCELED = 16;
    FAILED   = 17;
  }

  string scaling_job_id = 1;
  Status status         = 2;
  string log = 3;  // Handlersが出力する追加的なメッセージ
}

// Handlersが対象リソースをどう扱うべきかを示す
enum ResourceInstructions {
  UNKNOWN = 0;
  CREATE  = 1;
  UPDATE  = 2;
  DELETE  = 3;
  NOOP    = 4;  // 特に変更の必要がない状態、参照用のリソースなどで利用される
}

// 汎用リソース型
message Resource {
  oneof resource {
    Server              server                = 1;
    ServerGroupInstance server_group_instance = 2;
    ELB                 elb                   = 3;
    GSLB                gslb                  = 4;
    DNS                 dns                   = 5;
    Router              router                = 6;
    LoadBalancer        load_balancer         = 7;
  }
}

message Server {
  Parent parent = 1;
  reserved 2 to 10;

  string               id               = 11;
  string               zone             = 12;
  uint32               core             = 13;
  uint32               memory           = 14;
  bool                 dedicated_cpu    = 15;
  repeated NetworkInfo assigned_network = 16;
  string               name             = 17;
  bool                 shutdown_force   = 18;
}

message ServerGroupInstance {
  Parent parent = 1;
  reserved 2 to 10;

  string id   = 11;  // 新規作成指示時は空
  string zone = 12;

  // plan
  uint32 core            = 13;
  uint32 memory          = 14;
  bool   dedicated_cpu   = 15;
  string private_host_id = 16;

  // disks
  repeated Disk disks          = 17;
  EditParameter edit_parameter = 18;  // 1番目のディスクにのみ有効

  // networks
  repeated NIC network_interfaces = 19;

  // misc
  string cd_rom_id        = 20;
  string interface_driver = 21;

  // common
  string          name           = 22;
  repeated string tags           = 23;
  string          description    = 24;
  string          icon_id        = 25;
  bool            shutdown_force = 26;

  // ******** messages ***********

  message Disk {
    reserved 1 to 10;

    string id   = 11;  // 新規作成指示時は空
    string zone = 12;

    // sources
    string source_archive_id = 13;
    string source_disk_id    = 14;

    // spec
    string plan       = 15;  // ssd or hdd
    string connection = 16;  // virtio or ide
    uint32 size       = 17;

    // common
    string          name        = 18;
    repeated string tags        = 19;
    string          description = 20;
    string          icon_id     = 21;
  }

  message EditParameter {
    reserved 1 to 10;

    string host_name             = 11;
    string password              = 12;
    bool   disable_password_auth = 13;
    bool   enable_dhcp           = 14;
    bool   change_partition_uuid = 15;

    string ip_address       = 16;
    uint32 network_mask_len = 17;
    string default_route    = 18;

    repeated string ssh_keys    = 19;
    repeated string ssh_key_ids = 20;

    repeated string startup_scripts = 21;
  }

  message NIC {
    reserved 1 to 10;

    string      upstream         = 11;
    string      packet_filter_id = 12;
    string      user_ip_address  = 13;
    NetworkInfo assigned_network = 14;
    ExposeInfo  expose_info      = 15;
  }

  // NICに紐づくネットワーク公開情報
  // 上流リソースの操作のための定義を含む
  message ExposeInfo {
    reserved 1 to 10;

    repeated uint32 ports             = 11;
    string          server_group_name = 12;  // ELB向け
    uint32          weight            = 13;  // GSLB向け
    repeated string vips              = 14;  // LB向け
    HealthCheck     health_check      = 15;  // LB向け
    string          record_name       = 16;  // DNS向け
    uint32          ttl               = 17;  // DNS向け
  }

  message HealthCheck {
    reserved 1 to 10;

    string protocol    = 11;
    string path        = 12;
    uint32 status_code = 13;
  }
}

message ELB {
  reserved 2 to 10;
  Parent parent = 1;

  string id                 = 11;
  string region             = 12;
  uint32 plan               = 13;
  string virtual_ip_address = 14;
  string fqdn               = 15;
  string name               = 16;
}

message GSLB {
  reserved 1 to 10;

  string              id      = 11;
  string              fqdn    = 12;
  repeated GSLBServer servers = 13;
  string              name    = 14;
}

message GSLBServer {
  reserved 1 to 10;

  string ip_address = 11;
  bool   enabled    = 12;
  uint32 weight     = 13;
}

message DNS {
  reserved 1 to 10;

  string          id          = 11;
  string          zone        = 12;
  repeated string dns_servers = 13;
}

message Router {
  reserved 1 to 10;

  string id         = 11;
  string zone       = 12;
  uint32 band_width = 13;
  string name       = 14;
}

message LoadBalancer {
  reserved 1 to 10;

  string                   id                   = 11;
  string                   zone                 = 12;
  repeated LoadBalancerVIP virtual_ip_addresses = 13;
  string                   name                 = 14;
}

message LoadBalancerVIP {
  reserved 1 to 10;

  string                      ip_address = 11;
  uint32                      port       = 12;
  repeated LoadBalancerServer servers    = 13;
}

message LoadBalancerServer {
  reserved 1 to 10;

  string ip_address = 11;
  bool   enabled    = 12;
}

message Parent {
  reserved 1 to 10;

  oneof resource {
    ELB          elb           = 11;
    GSLB         gslb          = 12;
    DNS          dns           = 13;
    LoadBalancer load_balancer = 14;
  }
}

message NetworkInfo {
  reserved 1 to 10;

  string ip_address = 11;
  uint32 netmask    = 12;
  string gateway    = 13;
  uint32 index      = 14;
}